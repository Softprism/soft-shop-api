{"version":3,"sources":["../../src/models/store.model.js"],"names":["StoreSchema","mongoose","Schema","name","type","String","required","images","address","phone_number","email","unique","password","category","Types","ObjectId","ref","openingTime","closingTime","deliveryTime","location","coordinates","Number","labels","labelTitle","labelThumb","isVerified","Boolean","isActive","createdDate","Date","now","tax","index","Store","model"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAMA,WAAW,GAAGC,qBAASC,MAAT,CAAgB;AAClCC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAD4B;AAElCC,EAAAA,MAAM,EAAE,CAAC;AAAEH,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAAD,CAF0B;AAEU;AAC5CE,EAAAA,OAAO,EAAE;AAAEJ,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAHyB;AAIlCG,EAAAA,YAAY,EAAE;AAAEL,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAJoB;AAKlCI,EAAAA,KAAK,EAAE;AAAEN,IAAAA,IAAI,EAAEC,MAAR;AAAgBM,IAAAA,MAAM,EAAE,IAAxB;AAA8BL,IAAAA,QAAQ,EAAE;AAAxC,GAL2B;AAMlCM,EAAAA,QAAQ,EAAE;AAAER,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GANwB;AAOlCO,EAAAA,QAAQ,EAAE;AAAET,IAAAA,IAAI,EAAEH,qBAASC,MAAT,CAAgBY,KAAhB,CAAsBC,QAA9B;AAAwCC,IAAAA,GAAG,EAAE;AAA7C,GAPwB;AAQlCC,EAAAA,WAAW,EAAE;AAAEb,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GARqB;AASlCY,EAAAA,WAAW,EAAE;AAAEd,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GATqB;AAUlCa,EAAAA,YAAY,EAAE;AAAEf,IAAAA,IAAI,EAAEC;AAAR,GAVoB;AAWlCe,EAAAA,QAAQ,EAAE;AACRhB,IAAAA,IAAI,EAAE;AAAEA,MAAAA,IAAI,EAAEC,MAAR;AAAgB,iBAAS,OAAzB;AAAkC,cAAM,CAAC,OAAD;AAAxC,KADE;AAERgB,IAAAA,WAAW,EAAE,CAACC,MAAD;AAFL,GAXwB;AAelCC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,UAAU,EAAE;AAAEpB,MAAAA,IAAI,EAAEC;AAAR,KADd;AAEEoB,IAAAA,UAAU,EAAE;AAAErB,MAAAA,IAAI,EAAEC;AAAR,KAFd,CAEgC;;AAFhC,GADM,CAf0B;AAqBlCqB,EAAAA,UAAU,EAAE;AAAEtB,IAAAA,IAAI,EAAEuB,OAAR;AAAiB,eAAS;AAA1B,GArBsB;AAqBa;AAC/CC,EAAAA,QAAQ,EAAE;AAAExB,IAAAA,IAAI,EAAEuB,OAAR;AAAiB,eAAS;AAA1B,GAtBwB;AAsBU;AAC5CE,EAAAA,WAAW,EAAE;AAAEzB,IAAAA,IAAI,EAAE0B,IAAR;AAAc,eAASA,IAAI,CAACC;AAA5B,GAvBqB;AAwBlCC,EAAAA,GAAG,EAAE;AAAE5B,IAAAA,IAAI,EAAEC;AAAR;AAxB6B,CAAhB,CAApB;;AA0BAL,WAAW,CAACiC,KAAZ,CAAkB;AAAEb,EAAAA,QAAQ,EAAE;AAAZ,CAAlB;;AACA,IAAMc,KAAK,GAAGjC,qBAASkC,KAAT,CAAe,OAAf,EAAwBnC,WAAxB,CAAd;;eAEekC,K","sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst StoreSchema = mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  images: [{ type: String, required: true }], // array to store multiple images\r\n  address: { type: String, required: true },\r\n  phone_number: { type: String, required: true },\r\n  email: { type: String, unique: true, required: true },\r\n  password: { type: String, required: true },\r\n  category: { type: mongoose.Schema.Types.ObjectId, ref: \"Category\" },\r\n  openingTime: { type: String, required: true },\r\n  closingTime: { type: String, required: true },\r\n  deliveryTime: { type: String },\r\n  location: {\r\n    type: { type: String, default: \"Point\", enum: [\"Point\"] },\r\n    coordinates: [Number],\r\n  },\r\n  labels: [\r\n    {\r\n      labelTitle: { type: String },\r\n      labelThumb: { type: String }, //Label thumbnail\r\n    },\r\n  ],\r\n  isVerified: { type: Boolean, default: false }, // this validates a store on the platform\r\n  isActive: { type: Boolean, default: true }, // this shows if a store is available to receive orders\r\n  createdDate: { type: Date, default: Date.now },\r\n  tax: { type: String },\r\n});\r\nStoreSchema.index({ location: \"2dsphere\" });\r\nconst Store = mongoose.model(\"Store\", StoreSchema);\r\n\r\nexport default Store;\r\n"],"file":"store.model.js"}