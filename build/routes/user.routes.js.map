{"version":3,"sources":["../../src/routes/user.routes.js"],"names":["router","express","Router","get","getUsers","post","verifyEmailAddress","not","isEmpty","isEmail","isMobilePhone","isLength","min","registerUser","exists","loginUser","auth","getLoggedInUser","put","updateUser","getUserBasketItems","addItemToBasket","editBasketItems","deleteBasketItem","deleteAllBasketItems","forgotPassword","validateToken","patch","createNewPassword"],"mappings":";;;;;;;;;AAAA;;AACA;;AAIA;;AAkBA;;AApBA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AAsBA;AACA;AACA;AACAF,MAAM,CAACG,GAAP,CAAW,GAAX,EAAgBC,wBAAhB,E,CAEA;AACA;AACA;;AACAJ,MAAM,CAACK,IAAP,CAAY,SAAZ,EAAuBC,kCAAvB,E,CAEA;AACA;AACA;;AACAN,MAAM,CAACK,IAAP,CACE,WADF,EAEE,CACE,6BAAM,YAAN,EAAoB,yBAApB,EAA+CE,GAA/C,GAAqDC,OAArD,EADF,EAEE,6BAAM,WAAN,EAAmB,wBAAnB,EAA6CD,GAA7C,GAAmDC,OAAnD,EAFF,EAGE,6BAAM,OAAN,EAAe,0BAAf,EAA2CC,OAA3C,EAHF,EAIE,6BAAM,cAAN,EAAsB,iCAAtB,EAAyDC,aAAzD,EAJF,EAKE,6BACE,UADF,EAEE,iDAFF,EAGEC,QAHF,CAGW;AAAEC,EAAAA,GAAG,EAAE;AAAP,CAHX,CALF,CAFF,EAYEC,4BAZF,E,CAeA;AACA;AACA;;AAEAb,MAAM,CAACK,IAAP,CACE,QADF,EAEE,CACE,6BAAM,OAAN,EAAe,4BAAf,EAA6CI,OAA7C,EADF,EAEE,6BAAM,UAAN,EAAkB,yCAAlB,EAA6DE,QAA7D,CAAsE;AACpEC,EAAAA,GAAG,EAAE;AAD+D,CAAtE,CAFF,EAKE,6BAAM,UAAN,EAAkB,sBAAlB,EAA0CE,MAA1C,EALF,CAFF,EASEC,yBATF,E,CAYA;AACA;AACA;;AAEAf,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBa,UAArB,EAA2BC,+BAA3B,E,CAEA;AACA;AACA;;AAEAjB,MAAM,CAACkB,GAAP,CAAW,GAAX,EAAgBF,UAAhB,EAAsBG,0BAAtB,E,CAEA;AACA;AACA;;AACAnB,MAAM,CAACG,GAAP,CAAW,SAAX,EAAsBa,UAAtB,EAA4BI,kCAA5B,E,CAEA;AACA;AACA;;AACApB,MAAM,CAACK,IAAP,CAAY,SAAZ,EAAuBW,UAAvB,EAA6BK,+BAA7B,E,CAEA;AACA;AACA;;AACArB,MAAM,CAACkB,GAAP,CAAW,SAAX,EAAsBF,UAAtB,EAA4BM,+BAA5B,E,CAEA;AACA;AACA;;AACAtB,MAAM,UAAN,CAAc,SAAd,EAAyBgB,UAAzB,EAA+BO,gCAA/B,E,CAEA;AACA;AACA;;AACAvB,MAAM,UAAN,CAAc,aAAd,EAA6BgB,UAA7B,EAAmCQ,oCAAnC,E,CAEA;AACA;AACA;;AACAxB,MAAM,CAACkB,GAAP,CAAW,kBAAX,EAA+BO,8BAA/B,E,CAEA;AACA;AACA;;AACAzB,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBuB,6BAArB,E,CAEA;AACA;AACA;;AACA1B,MAAM,CAAC2B,KAAP,CAAa,WAAb,EAA0BC,iCAA1B;eAEe5B,M","sourcesContent":["import express from \"express\";\r\nimport { check } from \"express-validator\";\r\n\r\nconst router = express.Router();\r\n\r\nimport {\r\n  getUsers,\r\n  registerUser,\r\n  loginUser,\r\n  getLoggedInUser,\r\n  updateUser,\r\n  addItemToBasket,\r\n  forgotPassword,\r\n  validateToken,\r\n  createNewPassword,\r\n  verifyEmailAddress,\r\n  getUserBasketItems,\r\n  // createUserBasket,\r\n  editBasketItems,\r\n  deleteBasketItem,\r\n  deleteAllBasketItems,\r\n} from \"../controllers/user.controller.js\";\r\n\r\nimport { auth } from \"../middleware/auth.js\";\r\n\r\n// @route   GET /users\r\n// @desc    Get all Users\r\n// @access  Public\r\nrouter.get(\"/\", getUsers);\r\n\r\n// @route   POST /verify\r\n// @desc    send OTP to verify new user signup email\r\n// @access  Public\r\nrouter.post(\"/verify\", verifyEmailAddress);\r\n\r\n// @route   POST /users/register\r\n// @desc    Register a User\r\n// @access  Public\r\nrouter.post(\r\n  \"/register\",\r\n  [\r\n    check(\"first_name\", \"Please Enter First Name\").not().isEmpty(),\r\n    check(\"last_name\", \"Please Enter Last Name\").not().isEmpty(),\r\n    check(\"email\", \"Please Enter Valid Email\").isEmail(),\r\n    check(\"phone_number\", \"Please Enter Valid Phone Number\").isMobilePhone(),\r\n    check(\r\n      \"password\",\r\n      \"Please Enter Password with 6 or more characters\"\r\n    ).isLength({ min: 6 }),\r\n  ],\r\n  registerUser\r\n);\r\n\r\n// @route   POST /user/login\r\n// @desc    Login a User & get token\r\n// @access  Public\r\n\r\nrouter.post(\r\n  \"/login\",\r\n  [\r\n    check(\"email\", \"Please enter a Valid Email\").isEmail(),\r\n    check(\"password\", \"Password should be 6 characters or more\").isLength({\r\n      min: 6,\r\n    }),\r\n    check(\"password\", \"Password is Required\").exists(),\r\n  ],\r\n  loginUser\r\n);\r\n\r\n// @route   GET /user/login\r\n// @desc    Get logged in user\r\n// @access  Private\r\n\r\nrouter.get(\"/login\", auth, getLoggedInUser);\r\n\r\n// @route   PUT user/\r\n// @desc    Update User Details\r\n// @access  Private\r\n\r\nrouter.put(\"/\", auth, updateUser);\r\n\r\n// @route   POST /cart\r\n// @desc    creates a basket for the user\r\n// @access  Public\r\nrouter.get(\"/basket\", auth, getUserBasketItems);\r\n\r\n// @route   POST /basket\r\n// @desc    adds a product to User's basket\r\n// @access  Public\r\nrouter.post(\"/basket\", auth, addItemToBasket);\r\n\r\n// @route   PUT /basket\r\n// @desc    edit an item in user's basket\r\n// @access  Public\r\nrouter.put(\"/basket\", auth, editBasketItems);\r\n\r\n// @route   DELETE /basket\r\n// @desc    delete one item from user's basket\r\n// @access  Public\r\nrouter.delete(\"/basket\", auth, deleteBasketItem);\r\n\r\n// @route   DELETE /basket/all\r\n// @desc    deletes all item in user's basket\r\n// @access  Public\r\nrouter.delete(\"/basket/all\", auth, deleteAllBasketItems);\r\n\r\n// @route   PUT /password\r\n// @desc    reset a forget password\r\n// @access  Public\r\nrouter.put(\"/forgot-password\", forgotPassword);\r\n\r\n// @route   GET /token\r\n// @desc    validates a token\r\n// @access  Public\r\nrouter.get(\"/token\", validateToken);\r\n\r\n// @route   PATCH /password\r\n// @desc    creates new password for user after forget password\r\n// @access  Public\r\nrouter.patch(\"/password\", createNewPassword);\r\n\r\nexport default router;\r\n"],"file":"user.routes.js"}