{"version":3,"sources":["../../src/controllers/admin.controller.js"],"names":["router","express","Router","getAdmins","req","res","adminService","admins","length","status","json","msg","registerAdmin","next","errors","isEmpty","success","array","body","token","err","result","loginAdmin","getLoggedInAdmin","console","log","admin","id","updateAdmin"],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport { validationResult } from 'express-validator';\r\nimport { auth } from '../middleware/auth.js';\r\n\r\nimport * as adminService from '../services/admin.service.js';\r\n\r\nconst router = express.Router();\r\n\r\nconst getAdmins = async (req, res) => {\r\n\tconst admins = await adminService.getAdmins();\r\n\r\n\tadmins && admins.length > 0\r\n\t\t? res.status(200).json(admins)\r\n\t\t: res.status(404).json({ msg: 'No Admin Users found' });\r\n};\r\n\r\nconst registerAdmin = async (req, res, next) => {\r\n\tconst errors = validationResult(req);\r\n\r\n\tif (!errors.isEmpty()) {\r\n\t\treturn res.status(400).json({ success: false, msg: errors.array() });\r\n\t}\r\n\r\n\tconst token = await adminService.registerAdmin(req.body);\r\n\r\n\tif (token.err) {\r\n\t\tres.status(409).json({ success: false, msg: token.err });\r\n\t} else {\r\n    res.status(201).json({ success: true, result: token });\r\n  }\r\n\r\n};\r\n\r\nconst loginAdmin = async (req, res, next) => {\r\n\tconst errors = validationResult(req);\r\n\r\n\tif (!errors.isEmpty()) {\r\n\t\treturn res.status(400).json({\r\n\t\t\tsuccess: false,\r\n\t\t\tmsg: errors.array(),\r\n\t\t});\r\n\t}\r\n\r\n\t// Call Login function from adminService\r\n\tconst token = await adminService.loginAdmin(req.body);\r\n\r\n\tif (token.err) {\r\n\t\tres.status(403).json({ success: false, msg: token.err });\r\n\t} else {\r\n    res.status(200).json({ success: true, result: token });\r\n  }\r\n\r\n};\r\n\r\nconst getLoggedInAdmin = async (req, res, next) => {\r\n\tconsole.log(req.admin);\r\n\r\n\tconst admin = await adminService.getLoggedInAdmin(req.admin.id);\r\n\r\n\tif (admin.err) {\r\n\t\tres.status(500).json({ success: false, msg: token.err });\r\n\t} else {\r\n    res.status(200).json({ success: true, result: admin });\r\n  }\r\n};\r\n\r\nconst updateAdmin = async (req, res, next) => {\r\n\tconst errors = validationResult(req);\r\n\r\n\tif (!errors.isEmpty()) {\r\n\t\treturn res.status(400).json({ errors: errors.array() });\r\n\t}\r\n\r\n\tconst admin = await adminService.updateAdmin(req.body, req.admin.id);\r\n\r\n\tconsole.log(admin);\r\n\r\n\tif (admin.msg) {\r\n\t\tres.status(500).json({ success: false, msg: admin.msg });\r\n\t} else {\r\n    res.status(200).json({ success: true, result: admin });\r\n  }\r\n\r\n};\r\n\r\nexport { getAdmins, registerAdmin, loginAdmin, getLoggedInAdmin, updateAdmin };\r\n"],"file":"admin.controller.js"}