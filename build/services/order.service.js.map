{"version":3,"sources":["../../src/services/order.service.js"],"names":["getOrders","urlParams","matchParam","limit","Number","skip","store","mongoose","Types","ObjectId","user","isFavorite","pipeline","$unset","orders","Order","aggregate","match","project","status","totalPrice","orderId","append","sort","console","log","err","createOrder","orderParam","User","findById","vUser","Store","vStore","s4","Math","floor","random","toString","substring","order","save","newOrder","lookup","from","localField","foreignField","as","addFields","$arrayElemAt","neworder","toggleFavorite","orderID","msg","getOrderDetails","orderDetails","editOrder","findByIdAndUpdate","$set","omitUndefined","useFindAndModify","_id","reviewOrder","review","product","newReview","Review"],"mappings":"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","sourcesContent":["import Order from \"../models/order.model.js\";\r\nimport User from \"../models/user.model.js\";\r\nimport Store from \"../models/store.model.js\";\r\nimport mongoose from \"mongoose\";\r\nimport Review from \"../models/review.model.js\";\r\n\r\nconst getOrders = async (urlParams) => {\r\n  try {\r\n    let matchParam = {};\r\n    const limit = Number(urlParams.limit);\r\n    const skip = Number(urlParams.skip);\r\n    if (urlParams.store)\r\n      matchParam.store = mongoose.Types.ObjectId(urlParams.store);\r\n    if (urlParams.user)\r\n      matchParam.user = mongoose.Types.ObjectId(urlParams.user);\r\n    if (urlParams.isFavorite) matchParam.isFavorite = urlParams.isFavorite;\r\n\r\n    const pipeline = [\r\n      {\r\n        $unset: [\r\n          \"store.password\",\r\n          \"store.email\",\r\n          \"store.labels\",\r\n          \"store.phone_number\",\r\n          \"store.images\",\r\n          \"store.category\",\r\n          \"store.openingTime\",\r\n          \"store.closingTime\",\r\n          \"product_meta.details.variants\",\r\n          \"product_meta.details.store\",\r\n          \"product_meta.details.category\",\r\n          \"product_meta.details.label\",\r\n          \"productData\",\r\n          \"user.password\",\r\n          \"user.orders\",\r\n        ],\r\n      },\r\n    ];\r\n\r\n    let orders = Order.aggregate()\r\n      .match(matchParam)\r\n      .project({\r\n        status: 1,\r\n        totalPrice: 1,\r\n        \"orderItems.productName\": 1,\r\n        orderId: 1,\r\n        \"orderItems.selectedVariants.itemName\": 1,\r\n      })\r\n      .append(pipeline)\r\n      .sort(\"-createdDate\")\r\n      .limit(limit)\r\n      .skip(skip);\r\n\r\n    return orders;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { err: \"error loading orders\" };\r\n  }\r\n};\r\n\r\nconst createOrder = async (orderParam) => {\r\n  try {\r\n    const { store, user } = orderParam;\r\n\r\n    //validate user\r\n    const vUser = await User.findById(user);\r\n    if (!vUser) throw { err: \"User not found\" };\r\n\r\n    //validate store\r\n    const vStore = await Store.findById(store);\r\n    if (!vStore) throw { err: \"Store not found\" };\r\n\r\n    //generates random unique id;\r\n    let orderId = () => {\r\n      let s4 = () => {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n          .toString(16)\r\n          .substring(1);\r\n      };\r\n      //return id of format 'soft - aaaaa'\r\n      return \"soft - \" + s4();\r\n    };\r\n\r\n    //creates an order for user after all validation passes\r\n    const order = new Order(orderParam);\r\n    order.orderId = orderId();\r\n\r\n    let newOrder = await order.save();\r\n\r\n    // Returns new order to response\r\n    const pipeline = [\r\n      {\r\n        $unset: [\r\n          \"store.password\",\r\n          \"store.email\",\r\n          \"store.labels\",\r\n          \"store.phone_number\",\r\n          \"store.images\",\r\n          \"store.category\",\r\n          \"store.openingTime\",\r\n          \"store.closingTime\",\r\n          \"productData\",\r\n          \"user.password\",\r\n          \"user.orders\",\r\n        ],\r\n      },\r\n    ];\r\n    const neworder = await Order.aggregate()\r\n      .match({\r\n        orderId: newOrder.orderId,\r\n      })\r\n      .lookup({\r\n        from: \"stores\",\r\n        localField: \"store\",\r\n        foreignField: \"_id\",\r\n        as: \"store\",\r\n      })\r\n      .lookup({\r\n        from: \"users\",\r\n        localField: \"user\",\r\n        foreignField: \"_id\",\r\n        as: \"user\",\r\n      })\r\n      .addFields({\r\n        user: { $arrayElemAt: [\"$user\", 0] },\r\n        store: { $arrayElemAt: [\"$store\", 0] },\r\n      })\r\n      .append(pipeline);\r\n\r\n    return neworder;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return { err: \"error creating new order\" };\r\n  }\r\n};\r\n\r\nconst toggleFavorite = async (orderID) => {\r\n  try {\r\n    //adds or remove users favorite order\r\n    const order = await Order.findById(orderID);\r\n\r\n    if (!order) {\r\n      throw { err: \"Invalid Order\" };\r\n    }\r\n\r\n    order.isFavorite = !order.isFavorite;\r\n    order.save();\r\n\r\n    if (order.isFavorite) {\r\n      console.log(\"Order marked as favorite\");\r\n      return { msg: \"Order marked as favorite\" };\r\n    } else {\r\n      console.log(\"Order removed from favorite\");\r\n      return { msg: \"Order removed from favorites\" };\r\n    }\r\n\r\n    // return order;\r\n  } catch (err) {\r\n    return { err: \"Error marking order as favorite\" };\r\n  }\r\n};\r\n\r\nconst getOrderDetails = async (orderID) => {\r\n  try {\r\n    const order = await Order.findById(orderID);\r\n\r\n    if (!order) {\r\n      throw { err: \"Error getting this order details\" };\r\n    }\r\n    //get users order details\r\n    //can be used by users, stores and admin\r\n\r\n    const pipeline = [\r\n      {\r\n        $unset: [\r\n          \"store.password\",\r\n          \"store.email\",\r\n          \"store.labels\",\r\n          \"store.phone_number\",\r\n          \"store.images\",\r\n          \"store.category\",\r\n          \"store.openingTime\",\r\n          \"store.closingTime\",\r\n          \"productData\",\r\n          \"user.password\",\r\n          \"user.orders\",\r\n        ],\r\n      },\r\n    ];\r\n    const orderDetails = await Order.aggregate()\r\n      .match({\r\n        orderId: order.orderId,\r\n      })\r\n      .lookup({\r\n        from: \"stores\",\r\n        localField: \"store\",\r\n        foreignField: \"_id\",\r\n        as: \"store\",\r\n      })\r\n      .lookup({\r\n        from: \"users\",\r\n        localField: \"user\",\r\n        foreignField: \"_id\",\r\n        as: \"user\",\r\n      })\r\n      .addFields({\r\n        user: { $arrayElemAt: [\"$user\", 0] },\r\n        store: { $arrayElemAt: [\"$store\", 0] },\r\n      })\r\n      .append(pipeline);\r\n\r\n    return orderDetails;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nconst editOrder = async (orderID, orderParam) => {\r\n  try {\r\n    //can be used by both stores and users\r\n    await Order.findByIdAndUpdate(\r\n      orderID,\r\n      { $set: orderParam },\r\n      { omitUndefined: true, new: true, useFindAndModify: false }\r\n    );\r\n    const pipeline = [\r\n      {\r\n        $unset: [\r\n          \"store.password\",\r\n          \"store.email\",\r\n          \"store.labels\",\r\n          \"store.phone_number\",\r\n          \"store.images\",\r\n          \"store.category\",\r\n          \"store.openingTime\",\r\n          \"store.closingTime\",\r\n          \"productData\",\r\n          \"user.password\",\r\n          \"user.orders\",\r\n        ],\r\n      },\r\n    ];\r\n    const newOrder = await Order.aggregate()\r\n      .match({\r\n        _id: mongoose.Types.ObjectId(orderID),\r\n      })\r\n      .lookup({\r\n        from: \"stores\",\r\n        localField: \"store\",\r\n        foreignField: \"_id\",\r\n        as: \"store\",\r\n      })\r\n      .lookup({\r\n        from: \"users\",\r\n        localField: \"user\",\r\n        foreignField: \"_id\",\r\n        as: \"user\",\r\n      })\r\n      .addFields({\r\n        user: { $arrayElemAt: [\"$user\", 0] },\r\n        store: { $arrayElemAt: [\"$store\", 0] },\r\n      })\r\n      .append(pipeline);\r\n\r\n    return newOrder;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { err: \"error editing this order\" };\r\n  }\r\n};\r\n\r\nconst reviewOrder = async (review) => {\r\n  try {\r\n    const product = await Order.findById(review.order);\r\n\r\n    if (!product) throw { err: \"order could not be found\" };\r\n\r\n    const newReview = new Review(review);\r\n    await newReview.save();\r\n\r\n    return newReview;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport {\r\n  getOrders,\r\n  createOrder,\r\n  toggleFavorite,\r\n  getOrderDetails,\r\n  editOrder,\r\n  reviewOrder,\r\n};\r\n\r\n// Updates\r\n// Make getOrders able to fetch history for both stores and users by adding the parameters in the url query.\r\n//scrap the toggleFavorite, cancel, deliver, edit, receive and complete order functions, operations can be carried out within the editOrder function.\r\n// Get favorites can also be added as a parameter to the getOrders function.\r\n"],"file":"order.service.js"}