{"version":3,"sources":["../../src/services/admin.service.js"],"names":["getAdmins","Admin","find","admins","length","registerAdmin","params","username","password","findOne","admin","err","bcrypt","genSalt","salt","hash","save","payload","id","token","jwt","sign","process","env","JWT_SECRET","expiresIn","loginAdmin","loginParam","compare","isMatch","console","log","getLoggedInAdmin","adminParam","findById","select","updateAdmin","updateParam","adminFields","msg","findByIdAndUpdate","$set","omitUndefined","useFindAndModify"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nimport Admin from '../models/admin.model.js';\r\n\r\nconst getAdmins = async () => {\r\n\ttry {\r\n\t\tconst admins = await Admin.find();\r\n\r\n\t\tif (admins.length > 0) {\r\n\t\t\treturn admins;\r\n\t\t}\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\nconst registerAdmin = async (params) => {\r\n\tconst { username, password } = params;\r\n\r\n\ttry {\r\n\t\tlet admin = await Admin.findOne({ username });\r\n\r\n\t\tif (admin) {\r\n\t\t\tthrow { err: 'Admin account already exists' };\r\n\t\t}\r\n\r\n\t\t// Create Admin Object\r\n\t\tadmin = new Admin({\r\n\t\t\tusername,\r\n\t\t\tpassword,\r\n\t\t});\r\n\r\n\t\tconst salt = await bcrypt.genSalt(10);\r\n\r\n\t\t// Replace password from user object with encrypted one\r\n\t\tadmin.password = await bcrypt.hash(password, salt);\r\n\r\n\t\t// Save user to db\r\n\t\tawait admin.save();\r\n\r\n\t\t// Define payload for token\r\n\t\tconst payload = {\r\n\t\t\tadmin: {\r\n\t\t\t\tid: admin.id,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\t// Generate and return token to server\r\n\t\tconst token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n\t\t\texpiresIn: 36000,\r\n\t\t});\r\n\r\n\t\treturn token;\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\nconst loginAdmin = async (loginParam) => {\r\n\tconst { username, password } = loginParam;\r\n\r\n\ttry {\r\n\t\t// Find admin with email\r\n\t\tlet admin = await Admin.findOne({ username });\r\n\r\n\t\tif (!admin) {\r\n\t\t\tthrow { err: 'Admin not found' };\r\n\t\t}\r\n\r\n\t\t// Check if password matches with stored hash\r\n\t\tconst isMatch = await bcrypt.compare(password, admin.password);\r\n\r\n\t\tif (!isMatch) {\r\n\t\t\tthrow { err: 'Wrong password' };\r\n\t\t}\r\n\r\n\t\t// Define payload for token\r\n\t\tconst payload = {\r\n\t\t\tadmin: {\r\n\t\t\t\tid: admin.id,\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\t// Generate and return token to server\r\n\t\tconst token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n\t\t\texpiresIn: 36000,\r\n\t\t});\r\n\r\n\t\tif (!token) {\r\n\t\t\tthrow { err: 'Missing Token' };\r\n\t\t}\r\n\r\n\t\treturn token;\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\nconst getLoggedInAdmin = async (adminParam) => {\r\n\ttry {\r\n\t\tconst admin = await Admin.findById(adminParam).select('-password');\r\n\r\n\t\treturn admin;\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\nconst updateAdmin = async (updateParam, id) => {\r\n\tconst { username, password } = updateParam;\r\n\r\n\t// Build Admin Object\r\n\tconst adminFields = {};\r\n\r\n\t// Check for fields\r\n\tif (username) adminFields.username = username;\r\n\tif (password) {\r\n\t\tconst salt = await bcrypt.genSalt(10);\r\n\r\n\t\t// Replace password from admin object with encrypted one\r\n\t\tadminFields.password = await bcrypt.hash(password, salt);\r\n\t}\r\n\r\n\ttry {\r\n\t\t// Find admin from DB Collection\r\n\t\tlet admin = await Admin.findById(id);\r\n\r\n\t\tif (!admin) throw { msg: 'Admin not found' };\r\n\r\n\t\t// Updates the admin Object with the changed values\r\n\t\tadmin = await Admin.findByIdAndUpdate(\r\n\t\t\tid,\r\n\t\t\t{ $set: adminFields },\r\n\t\t\t{ omitUndefined: true, new: true, useFindAndModify: false }\r\n\t\t);\r\n\r\n\t\treturn admin;\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\nexport { getAdmins, registerAdmin, loginAdmin, getLoggedInAdmin, updateAdmin };\r\n"],"file":"admin.service.js"}