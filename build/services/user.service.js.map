{"version":3,"sources":["../../src/services/user.service.js"],"names":["getUsers","urlParams","limit","Number","skip","cart","User","find","select","sort","createdDate","populate","path","users","verifyEmailAddress","email","findOne","user","err","token","email_subject","email_message","otp","registerUser","userParam","first_name","last_name","phone_number","password","bcrypt","genSalt","salt","hash","Token","findById","signupToken","isVerified","save","newUser","_id","findByIdAndDelete","payload","id","jwt","sign","process","env","JWT_SECRET","expiresIn","undefined","set","strict","console","log","loginUser","loginParam","compare","isMatch","pipeline","$unset","userDetails","aggregate","match","mongoose","Types","ObjectId","lookup","from","localField","foreignField","as","addFields","totalReviews","$size","totalOrders","append","getLoggedInUser","updateUser","updateParam","address","userFields","findByIdAndUpdate","$set","omitUndefined","useFindAndModify","orders","addItemToBasket","userId","basketItemMeta","newBasketItem","Basket","getUserBasketItems","group","total","$sum","totalProductPriceInBasket","userBasket","count","length","editBasketItems","basketMeta","basketId","updateBasket","deleteBasketItem","deleteAllBasketItems","deleteMany","forgotPassword","findUser","validateToken","type","userToken","createNewPassword","requestToken","findOneAndUpdate"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport mongoose from \"mongoose\";\r\n\r\nimport User from \"../models/user.model.js\";\r\nimport Product from \"../models/product.model.js\";\r\nimport Token from \"../models/tokens.model.js\";\r\nimport Basket from \"../models/user-cart.model.js\";\r\n\r\nimport { sendEmail } from \"../utils/sendMail.js\";\r\nimport { getOTP } from \"../utils/sendOTP.js\";\r\n\r\n// Get all Users\r\nconst getUsers = async (urlParams) => {\r\n  try {\r\n    const limit = Number(urlParams.limit);\r\n    const skip = Number(urlParams.skip);\r\n\r\n    delete urlParams.limit;\r\n    delete urlParams.skip;\r\n    delete urlParams.cart;\r\n    const users = await User.find(urlParams)\r\n      .select(\"-password\")\r\n      .sort({ createdDate: -1 }) // -1 for descending sort\r\n      .populate({\r\n        path: \"cart.product_id\",\r\n        select: \"product_name price availability\",\r\n      })\r\n      .populate({ path: \"orders\", select: \"orderId status\" })\r\n      .limit(limit)\r\n      .skip(skip);\r\n\r\n    return users;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\n// send otp to Verify user email before sign up\r\nconst verifyEmailAddress = async ({ email }) => {\r\n  try {\r\n    // check if user exists\r\n    let user = await User.findOne({ email });\r\n    if (user) {\r\n      throw { err: \"User with this email already exists\" };\r\n    }\r\n\r\n    let token = await getOTP(\"user-signup\", email);\r\n\r\n    // send otp\r\n    let email_subject = \"OTP For Account Creation\";\r\n    let email_message = token.otp;\r\n    await sendEmail(email, email_subject, email_message);\r\n\r\n    return token;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\n// Register User\r\nconst registerUser = async (userParam) => {\r\n  try {\r\n    const { first_name, last_name, email, phone_number, password } = userParam;\r\n    let user = await User.findOne({ email });\r\n\r\n    if (user) {\r\n      // return res\r\n      // \t.status(400)\r\n      // \t.json({ msg: 'User with this email already exists' });\r\n      throw { err: \"User with this email already exists\" };\r\n    }\r\n\r\n    // Create User Object\r\n    user = new User({\r\n      first_name,\r\n      last_name,\r\n      email,\r\n      phone_number,\r\n      password,\r\n    });\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n\r\n    // Replace password from user object with encrypted one\r\n    user.password = await bcrypt.hash(password, salt);\r\n\r\n    // verify user's signup token\r\n    let signupToken = await Token.findById(userParam.token);\r\n\r\n    if (signupToken) {\r\n      user.isVerified = true;\r\n    }\r\n\r\n    // Save user to db\r\n    let newUser = await user.save();\r\n\r\n    // delete sign up token\r\n    if (newUser._id) await Token.findByIdAndDelete(userParam.token);\r\n\r\n    // delete user on creation, uncomment to test registration without populating your database\r\n    // await User.findByIdAndDelete(newUser._id);\r\n\r\n    // Define payload for token\r\n    const payload = {\r\n      user: {\r\n        id: user.id,\r\n      },\r\n    };\r\n\r\n    // Generate and return token to server\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n      expiresIn: 36000,\r\n    });\r\n\r\n    // unset user pass****d\r\n    user.password = undefined;\r\n\r\n    // set user token\r\n    user.set(\"token\", token, { strict: false });\r\n\r\n    return user;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return err;\r\n  }\r\n};\r\n\r\n// Login User\r\nconst loginUser = async (loginParam) => {\r\n  const { email, password } = loginParam;\r\n\r\n  try {\r\n    // Find user with email\r\n    let user = await User.findOne({ email });\r\n\r\n    if (!user) {\r\n      throw { err: \"User not found\" };\r\n    }\r\n\r\n    // Check if password matches with stored hash\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isMatch) {\r\n      throw { err: \"Wrong password\" };\r\n    }\r\n\r\n    // unset user pass***d\r\n    user.password = undefined;\r\n\r\n    // Define payload for token\r\n    const payload = {\r\n      user: {\r\n        id: user.id,\r\n      },\r\n    };\r\n\r\n    // Generate and return token to server\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n      expiresIn: 36000,\r\n    });\r\n\r\n    if (!token) {\r\n      throw { err: \"Missing Token\" };\r\n    }\r\n\r\n    const pipeline = [\r\n      { $unset: [\"userReviews\", \"userOrders\", \"cart\", \"password\", \"orders\"] },\r\n    ];\r\n\r\n    const userDetails = User.aggregate()\r\n      .match({\r\n        _id: mongoose.Types.ObjectId(user._id),\r\n      })\r\n      .lookup({\r\n        from: \"reviews\",\r\n        localField: \"_id\",\r\n        foreignField: \"user\",\r\n        as: \"userReviews\",\r\n      })\r\n      .lookup({\r\n        from: \"orders\",\r\n        localField: \"_id\",\r\n        foreignField: \"user\",\r\n        as: \"userOrders\",\r\n      })\r\n      .addFields({\r\n        totalReviews: { $size: \"$userReviews\" },\r\n        totalOrders: { $size: \"$userOrders\" },\r\n        token: token,\r\n      })\r\n      .append(pipeline);\r\n\r\n    return userDetails;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\n// Get Logged in User info\r\nconst getLoggedInUser = async (userParam) => {\r\n  try {\r\n    const pipeline = [\r\n      { $unset: [\"userReviews\", \"userOrders\", \"cart\", \"password\", \"orders\"] },\r\n    ];\r\n    const user = User.aggregate()\r\n      .match({\r\n        _id: mongoose.Types.ObjectId(userParam),\r\n      })\r\n      .lookup({\r\n        from: \"reviews\",\r\n        localField: \"_id\",\r\n        foreignField: \"user\",\r\n        as: \"userReviews\",\r\n      })\r\n      .lookup({\r\n        from: \"orders\",\r\n        localField: \"_id\",\r\n        foreignField: \"user\",\r\n        as: \"userOrders\",\r\n      })\r\n      .addFields({\r\n        totalReviews: { $size: \"$userReviews\" },\r\n        totalOrders: { $size: \"$userOrders\" },\r\n      })\r\n      .append(pipeline);\r\n\r\n    return user;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\n// Update User Details\r\nconst updateUser = async (updateParam, id) => {\r\n  const { address, password, email, phone_number } = updateParam;\r\n  // Build User Object\r\n  const userFields = {};\r\n\r\n  // Check for fields\r\n  if (address) userFields.address = address;\r\n  if (email) userFields.email = email;\r\n  if (phone_number) userFields.phone_number = phone_number;\r\n\r\n  if (password) {\r\n    const salt = await bcrypt.genSalt(10);\r\n\r\n    // Replace password from user object with encrypted one\r\n    userFields.password = await bcrypt.hash(password, salt);\r\n  }\r\n\r\n  try {\r\n    // Find user from DB Collection\r\n    let user = await User.findById(id);\r\n\r\n    if (!user) throw { err: \"User not found\" };\r\n\r\n    // Updates the user Object with the changed values\r\n    user = await User.findByIdAndUpdate(\r\n      id,\r\n      { $set: userFields },\r\n      { omitUndefined: true, new: true, useFindAndModify: false }\r\n    );\r\n\r\n    user.cart = undefined;\r\n    user.password = undefined;\r\n    user.orders = undefined;\r\n\r\n    return user;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n// const createUserBasket = async (userId, basketMeta) => { DEPRECATED\r\n//   // baskets should be initialized for users\r\n//   // basket is created per store\r\n\r\n//   // add user ID to basketMeta\r\n//   basketMeta.user = userId;\r\n//   try {\r\n//     // first verify if user already has a basket for the store\r\n//     let existingBasket = await Basket.findOne(basketMeta);\r\n//     if (existingBasket) throw { err: \"user has a basket for this store!\" };\r\n\r\n//     // create basket if none exists\r\n//     let newBasket = new Basket(basketMeta);\r\n//     newBasket.save();\r\n//     return newBasket;\r\n//   } catch (err) {\r\n//     return err;\r\n//   }\r\n// };\r\n\r\nconst addItemToBasket = async (userId, basketItemMeta) => {\r\n  // add user ID to basketMeta\r\n  basketItemMeta.user = userId;\r\n\r\n  // add item to basket\r\n  let newBasketItem = new Basket(basketItemMeta);\r\n  await newBasketItem.save();\r\n\r\n  // return user basket items\r\n  return await getUserBasketItems(userId);\r\n};\r\n\r\nconst getUserBasketItems = async (userId) => {\r\n  // get total price in basket\r\n  const totalProductPriceInBasket = await Basket.aggregate()\r\n    .match({\r\n      user: mongoose.Types.ObjectId(userId),\r\n    })\r\n    .group({\r\n      _id: \"$user\",\r\n      total: { $sum: \"$product.price\" },\r\n    });\r\n  // get user basket items\r\n  let userBasket = await Basket.aggregate().match({\r\n    user: mongoose.Types.ObjectId(userId),\r\n  });\r\n  return {\r\n    userBasket,\r\n    total: totalProductPriceInBasket[0].total,\r\n    count: userBasket.length,\r\n  };\r\n};\r\n\r\nconst editBasketItems = async (userId, basketMeta) => {\r\n  try {\r\n    // check if basket exists\r\n    let userBasket = await Basket.findById(basketMeta.basketId);\r\n    if (!userBasket) throw { err: \"basket not found\" };\r\n\r\n    // update basket with new data\r\n    let updateBasket = await Basket.findByIdAndUpdate(\r\n      basketMeta.basketId,\r\n      { $set: basketMeta },\r\n      { omitUndefined: true, new: true, useFindAndModify: false }\r\n    );\r\n\r\n    // return user basket items\r\n    return await getUserBasketItems(userId);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nconst deleteBasketItem = async (userId, { basketId }) => {\r\n  try {\r\n    // check if basket exists\r\n    let userBasket = await Basket.findById(basketId);\r\n    if (!userBasket) throw { err: \"basket not found\" };\r\n\r\n    // update basket with new data\r\n    await Basket.findByIdAndDelete(basketId);\r\n\r\n    // return user basket items\r\n    return await getUserBasketItems(userId);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nconst deleteAllBasketItems = async (userId) => {\r\n  try {\r\n    // check if basket exists\r\n    let userBasket = await Basket.find({ user: userId });\r\n    if (!userBasket) throw { err: \"user basket not found\" };\r\n\r\n    // update basket with new data\r\n    await Basket.deleteMany({ user: userId });\r\n\r\n    // return user basket items\r\n    return await getUserBasketItems(userId);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nconst forgotPassword = async ({ email }) => {\r\n  try {\r\n    // verify if user exists, throws error if not\r\n    let findUser = await User.findOne({ email });\r\n    if (!findUser) throw { err: \"email is not registered\" };\r\n\r\n    let token = await getOTP(\"user-forgot-password\", email);\r\n\r\n    // send otp\r\n    let email_subject = \"forgot password\";\r\n    let email_message = token.otp;\r\n    await sendEmail(email, email_subject, email_message);\r\n\r\n    return token;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nconst validateToken = async ({ type, otp, email }) => {\r\n  try {\r\n    // find token\r\n    let userToken = await Token.findOne({\r\n      otp,\r\n      email,\r\n      type,\r\n    });\r\n\r\n    if (!userToken) throw { err: \"invalid token\" };\r\n\r\n    return userToken;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nconst createNewPassword = async ({ token, email, password }) => {\r\n  try {\r\n    // validates token\r\n    let requestToken = await Token.findById(token);\r\n\r\n    // cancel operation if new password request doesn't have a token\r\n    if (!requestToken) throw { err: \"invalid token\" };\r\n\r\n    // encrypting password\r\n    const salt = await bcrypt.genSalt(10);\r\n    password = await bcrypt.hash(password, salt);\r\n\r\n    // update new password\r\n    let user = await User.findOneAndUpdate(\r\n      { email },\r\n      { $set: { password } },\r\n      { omitUndefined: true, new: true, useFindAndModify: false }\r\n    );\r\n\r\n    await Token.findByIdAndDelete(token);\r\n\r\n    // Unsetting unneeded fields\r\n    user.cart = undefined;\r\n    user.password = undefined;\r\n    user.orders = undefined;\r\n\r\n    //send confirmation email\r\n    let email_subject = \"Password Reset Successful\";\r\n    let email_message = \"Password has been reset successfully\";\r\n    await sendEmail(email, email_subject, email_message);\r\n\r\n    return user;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nexport {\r\n  getUsers,\r\n  verifyEmailAddress,\r\n  registerUser,\r\n  loginUser,\r\n  getLoggedInUser,\r\n  updateUser,\r\n  addItemToBasket,\r\n  forgotPassword,\r\n  validateToken,\r\n  createNewPassword,\r\n  // createUserBasket,\r\n  getUserBasketItems,\r\n  editBasketItems,\r\n  deleteBasketItem,\r\n  deleteAllBasketItems,\r\n};\r\n"],"file":"user.service.js"}