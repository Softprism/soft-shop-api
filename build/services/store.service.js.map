{"version":3,"sources":["../../src/services/store.service.js"],"names":["getStores","urlParams","pipeline","$unset","storesWithRating","limit","Number","skip","rating","matchParam","isOpen","currentTime","closingTime","$gte","isActive","$lte","name","RegExp","category","mongoose","Types","ObjectId","lat","radius","long","parseFloat","radian","stores","Store","aggregate","match","location","$geoWithin","$centerSphere","lookup","from","localField","foreignField","as","addFields","sumOfStars","$sum","numOfReviews","$size","averageRating","$ceil","$avg","productCount","orderCount","append","sort","forEach","store","push","console","log","getStore","storeId","_id","length","createStore","StoreParam","address","email","phone_number","password","openingTime","findOne","err","includes","newStore","bcrypt","genSalt","salt","hash","save","payload","id","token","jwt","sign","process","env","JWT_SECRET","expiresIn","loginStore","select","storeRes","compare","isMatch","getLoggedInStore","userParam","findById","updateStore","storeID","updateParam","images","labels","tax","storeUpdate","findByIdAndUpdate","$set","omitUndefined","useFindAndModify","addLabel","labelParam","getLabels"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport mongoose from \"mongoose\";\r\n\r\nimport Store from \"../models/store.model.js\";\r\n\r\nconst getStores = async (urlParams) => {\r\n  try {\r\n    // declare fields to exclude from response\r\n    const pipeline = [\r\n      {\r\n        $unset: [\r\n          \"products\",\r\n          \"orderReview\",\r\n          \"password\",\r\n          \"email\",\r\n          \"phone_number\",\r\n          \"labels\",\r\n          \"orders\",\r\n        ],\r\n      },\r\n    ];\r\n\r\n    let storesWithRating = []; // container to hold stores based on rating search\r\n\r\n    // setting pagination params\r\n    const limit = Number(urlParams.limit);\r\n    const skip = Number(urlParams.skip);\r\n\r\n    // validating rating param\r\n    const rating = Number(urlParams.rating);\r\n\r\n    // initializing matchParam\r\n    const matchParam = {};\r\n\r\n    if (urlParams.isOpen === \"true\" && urlParams.currentTime) {\r\n      matchParam.closingTime = { $gte: urlParams.currentTime };\r\n      matchParam.isActive = true;\r\n    } // checking opened stores\r\n\r\n    if (urlParams.isOpen === \"false\" && urlParams.currentTime) {\r\n      matchParam.closingTime = { $lte: urlParams.currentTime };\r\n      matchParam.isActive = false;\r\n    } // checking closed stores\r\n\r\n    if (urlParams.name) {\r\n      matchParam.name = new RegExp(urlParams.name, \"i\");\r\n    }\r\n\r\n    if (urlParams.category) {\r\n      urlParams.category = mongoose.Types.ObjectId(urlParams.category);\r\n      matchParam.category = urlParams.category;\r\n    }\r\n\r\n    if (urlParams.long && urlParams.lat && urlParams.radius) {\r\n      var long = parseFloat(urlParams.long);\r\n      var lat = parseFloat(urlParams.lat);\r\n      var radian = parseFloat(urlParams.radius / 3963.2);\r\n    }\r\n\r\n    // cleaning up the urlParams\r\n    delete urlParams.limit;\r\n    delete urlParams.skip;\r\n    delete urlParams.rating;\r\n    delete urlParams.long;\r\n    delete urlParams.lat;\r\n\r\n    // aggregating stores\r\n    const stores = Store.aggregate()\r\n      // matching store with geolocation\r\n      .match({\r\n        location: {\r\n          $geoWithin: {\r\n            $centerSphere: [[long, lat], radian],\r\n          },\r\n        },\r\n      })\r\n      // matching stores with matchParam\r\n      .match(matchParam)\r\n      //looking up the product collection for each stores\r\n      .lookup({\r\n        from: \"products\",\r\n        localField: \"_id\",\r\n        foreignField: \"store\",\r\n        as: \"products\",\r\n      })\r\n      //looking up the order collection for each stores\r\n      .lookup({\r\n        from: \"orders\",\r\n        localField: \"_id\",\r\n        foreignField: \"store\",\r\n        as: \"orders\",\r\n      })\r\n      // looking up each product on the review collection\r\n      .lookup({\r\n        from: \"reviews\",\r\n        localField: \"orders._id\",\r\n        foreignField: \"order\",\r\n        as: \"orderReview\",\r\n      })\r\n      // adding metrics to the response\r\n      .addFields({\r\n        sumOfStars: { $sum: \"$orderReview.star\" },\r\n        numOfReviews: { $size: \"$orderReview\" },\r\n        averageRating: { $ceil: { $avg: \"$orderReview.star\" } },\r\n        productCount: { $size: \"$products\" },\r\n        orderCount: { $size: \"$orders\" },\r\n      })\r\n      // appending excludes\r\n      .append(pipeline)\r\n      // sorting and pagination\r\n      .sort(\"-createdDate\")\r\n      .limit(limit)\r\n      .skip(skip);\r\n\r\n    if (rating >= 0) {\r\n      (await stores).forEach((store) => {\r\n        if (store.averageRating == rating) {\r\n          storesWithRating.push(store);\r\n        }\r\n      });\r\n      return storesWithRating;\r\n    } else {\r\n      return stores;\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getStore = async (storeId) => {\r\n  // declare fields to exclude from response\r\n  const pipeline = [\r\n    {\r\n      $unset: [\r\n        \"products.store\",\r\n        \"products.rating\",\r\n        \"products.category\",\r\n        \"products.customFee.items\",\r\n        \"productReview\",\r\n        \"password\",\r\n        \"email\",\r\n        \"phone_number\",\r\n        \"orders\",\r\n        \"orderReview\",\r\n        \"products.variant\",\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // aggregating stores\r\n  let store = await Store.aggregate()\r\n    // matching with requested store\r\n    .match({\r\n      _id: mongoose.Types.ObjectId(storeId),\r\n    })\r\n    // looking up the store in the product collection\r\n    .lookup({\r\n      from: \"products\",\r\n      localField: \"_id\",\r\n      foreignField: \"store\",\r\n      as: \"products\",\r\n    })\r\n    // returning only active products\r\n    .match({\r\n      \"products.status\": \"active\",\r\n    })\r\n    //looking up the order collection for each stores\r\n    .lookup({\r\n      from: \"orders\",\r\n      localField: \"_id\",\r\n      foreignField: \"store\",\r\n      as: \"orders\",\r\n    })\r\n    // looking up each product on the review collection\r\n    .lookup({\r\n      from: \"reviews\",\r\n      localField: \"orders._id\",\r\n      foreignField: \"order\",\r\n      as: \"orderReview\",\r\n    })\r\n    // adding metrics to the response\r\n    .addFields({\r\n      sumOfStars: { $sum: \"$orderReview.star\" },\r\n      numOfReviews: { $size: \"$orderReview\" },\r\n      averageRating: { $ceil: { $avg: \"$orderReview.star\" } },\r\n      productCount: { $size: \"$products\" },\r\n      orderCount: { $size: \"$orders\" },\r\n    })\r\n    // appending excludes\r\n    .append(pipeline);\r\n  console.log(store);\r\n  if (store.length < 1) {\r\n    store = await Store.aggregate()\r\n      // matching with requested store\r\n      .match({\r\n        _id: mongoose.Types.ObjectId(storeId),\r\n      })\r\n      //looking up the order collection for each stores\r\n      .lookup({\r\n        from: \"orders\",\r\n        localField: \"_id\",\r\n        foreignField: \"store\",\r\n        as: \"orders\",\r\n      })\r\n      // looking up each product on the review collection\r\n      .lookup({\r\n        from: \"reviews\",\r\n        localField: \"orders._id\",\r\n        foreignField: \"order\",\r\n        as: \"orderReview\",\r\n      })\r\n      // adding metrics to the response\r\n      .addFields({\r\n        sumOfStars: { $sum: \"$orderReview.star\" },\r\n        numOfReviews: { $size: \"$orderReview\" },\r\n        averageRating: { $ceil: { $avg: \"$orderReview.star\" } },\r\n        orderCount: { $size: \"$orders\" },\r\n      })\r\n      .append(pipeline);\r\n  }\r\n\r\n  // make average rating zero if null\r\n  if (store[0].averageRating === null) store[0].averageRating = 0;\r\n  return store[0];\r\n};\r\n\r\nconst createStore = async (StoreParam) => {\r\n  try {\r\n    const {\r\n      name,\r\n      address,\r\n      email,\r\n      phone_number,\r\n      password,\r\n      openingTime,\r\n      closingTime,\r\n      location,\r\n    } = StoreParam;\r\n\r\n    let store = await Store.findOne({ email });\r\n\r\n    if (store) {\r\n      throw { err: \"A store with this email already exists\" };\r\n    }\r\n\r\n    if (!openingTime.includes(\":\") || !closingTime.includes(\":\")) {\r\n      throw { err: \"Invalid time format\" };\r\n    }\r\n\r\n    const newStore = new Store(StoreParam);\r\n    const salt = await bcrypt.genSalt(10);\r\n\r\n    // Replace password from store object with encrypted one\r\n    newStore.password = await bcrypt.hash(password, salt);\r\n\r\n    await newStore.save();\r\n\r\n    const payload = {\r\n      store: {\r\n        id: newStore.id,\r\n      },\r\n    };\r\n\r\n    // Generate and return token to server\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n      expiresIn: 36000,\r\n    });\r\n\r\n    if (!token) {\r\n      throw { err: \"Missing Token\" };\r\n    }\r\n\r\n    return token;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n\r\nconst loginStore = async (StoreParam) => {\r\n  try {\r\n    const { email, password } = StoreParam;\r\n\r\n    let store = await Store.findOne({ email });\r\n    let storeRes = await Store.findOne({ email }).select(\"-password\");\r\n\r\n    if (!store) throw { err: \"Invalid Credentials\" };\r\n\r\n    // Check if password matches with stored hash\r\n    const isMatch = await bcrypt.compare(password, store.password);\r\n\r\n    if (!isMatch) {\r\n      throw { err: \"Invalid Credentials\" };\r\n    }\r\n\r\n    const payload = {\r\n      store: {\r\n        id: storeRes.id,\r\n      },\r\n    };\r\n\r\n    // Generate and return token to server\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, {\r\n      expiresIn: 36000,\r\n    });\r\n\r\n    return token;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst getLoggedInStore = async (userParam) => {\r\n  console.log(\"running\");\r\n  try {\r\n    const store = await Store.findById(userParam).select(\"-password\");\r\n    return store;\r\n  } catch (err) {\r\n    // console.error(err.message);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst updateStore = async (storeID, updateParam) => {\r\n  try {\r\n    const {\r\n      email,\r\n      password,\r\n      address,\r\n      phone_number,\r\n      images,\r\n      openingTime,\r\n      closingTime,\r\n      category,\r\n      labels,\r\n      tax,\r\n    } = updateParam;\r\n\r\n    const storeUpdate = {};\r\n\r\n    // Check for fields\r\n    if (address) storeUpdate.address = address;\r\n    if (images) storeUpdate.images = images;\r\n    if (email) storeUpdate.email = email;\r\n    if (openingTime) {\r\n      if (!storeUpdate.openingTime.includes(\":\")) {\r\n        delete storeUpdate.openingTime;\r\n        throw { err: \"Invalid time\" };\r\n      }\r\n      storeUpdate.openingTime = openingTime;\r\n    }\r\n    if (closingTime) {\r\n      if (!storeUpdate.closingTime.includes(\":\")) {\r\n        delete storeUpdate.closingTime;\r\n        throw { err: \"Invalid time\" };\r\n      }\r\n      storeUpdate.closingTime = closingTime;\r\n    }\r\n    if (phone_number) storeUpdate.email = phone_number;\r\n    if (category) storeUpdate.category = category;\r\n    if (labels) storeUpdate.labels = labels;\r\n    if (password) {\r\n      const salt = await bcrypt.genSalt(10);\r\n      storeUpdate.password = await bcrypt.hash(password, salt);\r\n    }\r\n\r\n    let store = await Store.findById(storeID);\r\n\r\n    if (!store) throw { err: \"Store not found\" };\r\n    console.log(storeID, storeUpdate);\r\n    store = await Store.findByIdAndUpdate(\r\n      storeID,\r\n      { $set: storeUpdate },\r\n      { omitUndefined: true, new: true, useFindAndModify: false }\r\n    );\r\n\r\n    let storeRes = await Store.findById(storeID).select(\"-password, -__v\");\r\n\r\n    return storeRes;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return err;\r\n  }\r\n};\r\n\r\nconst addLabel = async (storeId, labelParam) => {\r\n  let store = await Store.findById(storeId);\r\n\r\n  if (!store) throw { err: \"Store not found\" };\r\n\r\n  store.labels.push(labelParam);\r\n  await store.save();\r\n  return await Store.findById(storeId).select(\"-password, -__v\");\r\n};\r\n\r\nconst getLabels = async (storeId) => {\r\n  // get store labels\r\n  let store = await Store.findById(storeId);\r\n\r\n  if (!store) throw { err: \"Store not found\" };\r\n\r\n  return store.labels;\r\n};\r\n\r\nexport {\r\n  getStores,\r\n  createStore,\r\n  loginStore,\r\n  getLoggedInStore,\r\n  updateStore,\r\n  addLabel,\r\n  getStore,\r\n  getLabels,\r\n};\r\n"],"file":"store.service.js"}