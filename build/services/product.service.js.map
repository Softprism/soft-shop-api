{"version":3,"sources":["../../src/services/product.service.js"],"names":["getProducts","getParam","limit","Number","skip","matchParam","product_name","RegExp","category","mongoose","Types","ObjectId","store","price","availability","rating","status","label","pipeline","$unset","allProducts","Product","aggregate","match","lookup","from","localField","foreignField","as","addFields","totalRates","$sum","ratingAmount","$size","averageRating","$ceil","$avg","unwind","append","sort","console","log","getProductDetails","productId","productDetails","_id","createProduct","productParam","storeId","Store","findById","err","newProduct","save","updateProduct","product","findByIdAndUpdate","$set","omitUndefined","useFindAndModify","deleteProduct","deleteOne","msg","reviewProduct","review","newReview","Review","createVariant","variantParam","newVariant","Variant","updateVariant","variantId","updateParam","variant","addVariantItem","variantItems","push","getVariantItem","addCustomFee","customrFeeParam","newCustomFee","CustomFee","customFee","items","find","deleteCustomFee","customFeeId","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Product from \"../models/product.model.js\";\r\nimport Store from \"../models/store.model.js\";\r\nimport Review from \"../models/review.model.js\";\r\nimport Variant from \"../models/variant.model.js\";\r\nimport CustomFee from \"../models/customFees.model.js\";\r\n\r\nimport mongoose from \"mongoose\";\r\n\r\nconst getProducts = async (getParam) => {\r\n  try {\r\n    // get limit and skip from url parameters\r\n    const limit = Number(getParam.limit);\r\n    const skip = Number(getParam.skip);\r\n    let matchParam = {};\r\n    if (getParam.product_name) {\r\n      matchParam.product_name = new RegExp(getParam.product_name, \"i\");\r\n    }\r\n    if (getParam.category) {\r\n      matchParam.category = mongoose.Types.ObjectId(getParam.category);\r\n    }\r\n    if (getParam.store) {\r\n      matchParam.store = mongoose.Types.ObjectId(getParam.store);\r\n    }\r\n    if (getParam.price) {\r\n      matchParam.price = getParam.price;\r\n    }\r\n    if (getParam.availability) {\r\n      getParam.availability = getParam.availability === \"true\";\r\n      matchParam.availability = getParam.availability;\r\n    }\r\n    if (getParam.rating) {\r\n      matchParam.rating = getParam.rating;\r\n    }\r\n    if (getParam.status) {\r\n      matchParam.status = getParam.status;\r\n    }\r\n    if (getParam.label) {\r\n      matchParam.label = mongoose.Types.ObjectId(getParam.label);\r\n    }\r\n\r\n    const pipeline = [\r\n      {\r\n        $unset: [\r\n          \"store.password\",\r\n          \"store.email\",\r\n          \"store.labels\",\r\n          \"store.phone_number\",\r\n          \"category.image\",\r\n          \"productReview\",\r\n          \"store.address\",\r\n          \"variants.data\",\r\n          \"variant.items\",\r\n          \"customFee.items\",\r\n        ],\r\n      },\r\n    ];\r\n\r\n    let allProducts = Product.aggregate()\r\n      .match(matchParam)\r\n      // Get data from review collection for each product\r\n      .lookup({\r\n        from: \"reviews\",\r\n        localField: \"_id\",\r\n        foreignField: \"product\",\r\n        as: \"productReview\",\r\n      })\r\n      // Populate store field\r\n      .lookup({\r\n        from: \"stores\",\r\n        localField: \"store\",\r\n        foreignField: \"_id\",\r\n        as: \"store\",\r\n      })\r\n      // populat category field\r\n      .lookup({\r\n        from: \"categories\",\r\n        localField: \"category\",\r\n        foreignField: \"_id\",\r\n        as: \"category\",\r\n      })\r\n      // add the averageRating field for each product\r\n      .addFields({\r\n        totalRates: { $sum: \"$productReview.star\" },\r\n        ratingAmount: { $size: \"$productReview\" },\r\n        averageRating: { $ceil: { $avg: \"$productReview.star\" } },\r\n      })\r\n      // $lookup produces array, $unwind go destructure everything to object\r\n      .unwind(\"$store\")\r\n      .unwind(\"$category\")\r\n      // removing fields we don't need\r\n      .append(pipeline)\r\n      // Sorting and pagination\r\n      .sort(\"-createdDate\")\r\n      .limit(limit)\r\n      .skip(skip);\r\n\r\n    return allProducts;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nconst getProductDetails = async (productId) => {\r\n  console.log(1, productId);\r\n  try {\r\n    const pipeline = [\r\n      {\r\n        $unset: [\r\n          \"store.password\",\r\n          \"store.email\",\r\n          \"store.labels\",\r\n          \"store.phone_number\",\r\n          \"category.image\",\r\n          \"productReview\",\r\n          \"store.address\",\r\n          \"variants.data\",\r\n        ],\r\n      },\r\n    ];\r\n\r\n    let productDetails = Product.aggregate()\r\n      .match({ _id: mongoose.Types.ObjectId(productId) })\r\n      // Get data from review collection for each product\r\n      .lookup({\r\n        from: \"reviews\",\r\n        localField: \"_id\",\r\n        foreignField: \"product\",\r\n        as: \"productReview\",\r\n      })\r\n      // Populate store field\r\n      .lookup({\r\n        from: \"stores\",\r\n        localField: \"store\",\r\n        foreignField: \"_id\",\r\n        as: \"store\",\r\n      })\r\n      // populat category field\r\n      .lookup({\r\n        from: \"categories\",\r\n        localField: \"category\",\r\n        foreignField: \"_id\",\r\n        as: \"category\",\r\n      })\r\n      .lookup({\r\n        from: \"variants\",\r\n        localField: \"variant.items\",\r\n        foreignField: \"_id\",\r\n        as: \"variant\",\r\n      })\r\n      .lookup({\r\n        from: \"customfees\",\r\n        localField: \"_id\",\r\n        foreignField: \"product\",\r\n        as: \"customFee\",\r\n      })\r\n      // add the averageRating field for each product\r\n      .addFields({\r\n        totalRates: { $sum: \"$productReview.star\" },\r\n        ratingAmount: { $size: \"$productReview\" },\r\n        averageRating: { $ceil: { $avg: \"$productReview.star\" } },\r\n      })\r\n      // $lookup produces array, $unwind go destructure everything to object\r\n      .unwind(\"$store\")\r\n      .unwind(\"$category\")\r\n      // removing fields we don't need\r\n      .append(pipeline);\r\n\r\n    return productDetails;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nconst createProduct = async (productParam, storeId) => {\r\n  try {\r\n    // validate store, we have to make sure we're assigning a product to a store\r\n    const store = await Store.findById(storeId).catch((err) => {\r\n      throw { err: \"store not found\" };\r\n    });\r\n    if (!store) {\r\n      throw \"unable to add product to this store\";\r\n    }\r\n\r\n    // add store ID to productParam\r\n    productParam.store = storeId;\r\n\r\n    //create new product\r\n    const newProduct = new Product(productParam);\r\n    await newProduct.save(); // save new product\r\n\r\n    return newProduct;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst updateProduct = async (productParam, productId, storeId) => {\r\n  try {\r\n    //check if product exists\r\n    const product = await Product.findById(productId);\r\n    if (!product) {\r\n      throw {\r\n        err: \"Product not found\",\r\n      };\r\n    }\r\n\r\n    //apply changes to the product\r\n    let updateProduct = await Product.findByIdAndUpdate(\r\n      productId,\r\n      { $set: productParam },\r\n      { omitUndefined: true, new: true, useFindAndModify: false }\r\n    );\r\n\r\n    return updateProduct;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst deleteProduct = async (productId, storeId) => {\r\n  try {\r\n    // validate store, we have to make sure the product belongs to a store\r\n    const store = await Store.findById(storeId);\r\n\r\n    if (!store) {\r\n      throw {\r\n        err: \"Unable to delete products from this store\",\r\n      };\r\n    }\r\n    // check if product exists\r\n    const product = await Product.findById(productId);\r\n\r\n    if (!product) {\r\n      throw {\r\n        err: \"Product not found\",\r\n      };\r\n    }\r\n\r\n    //delete the product\r\n    await Product.deleteOne({ _id: productId });\r\n\r\n    return { msg: \"Successfully Deleted Product\" };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst reviewProduct = async (review) => {\r\n  try {\r\n    const product = await Product.findById(review.product);\r\n\r\n    if (!product) throw { err: \"product could not be found\" };\r\n\r\n    const newReview = new Review(review);\r\n    await newReview.save();\r\n\r\n    return newReview;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst createVariant = async (storeId, variantParam) => {\r\n  // create new variant label without items\r\n  try {\r\n    let store = await Store.findById(storeId);\r\n\r\n    if (!store) throw { err: \"Store not found\" }; // this ain't working\r\n\r\n    let newVariant = new Variant(variantParam);\r\n    await newVariant.save();\r\n\r\n    return newVariant;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nconst updateVariant = async (variantId, updateParam) => {\r\n  try {\r\n    let variant = await Variant.findById(variantId);\r\n    if (!variant) throw { err: \"variant not found\" };\r\n    // find a way to validate if variant exists\r\n\r\n    let updateVariant = await Variant.findByIdAndUpdate(\r\n      variantId,\r\n      { $set: updateParam },\r\n      { omitUndefined: true, new: true, useFindAndModify: false }\r\n    );\r\n\r\n    return updateVariant;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst addVariantItem = async (variantId, variantParam) => {\r\n  // add items to a variant label\r\n  try {\r\n    // find variant\r\n    let variant = await Variant.findById(variantId);\r\n    if (!variant) throw { err: \"variant not found\" };\r\n\r\n    // push new variant item and save\r\n    variant.variantItems.push(variantParam);\r\n    variant.save();\r\n\r\n    return variant;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst getVariantItem = async (variantId) => {\r\n  // add items to a variant label\r\n  try {\r\n    // find variant\r\n    let variant = await Variant.findById(variantId);\r\n    if (!variant) throw { err: \"variant not found\" };\r\n\r\n    return variant.variantItems;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst addCustomFee = async (storeId, customrFeeParam) => {\r\n  try {\r\n    let store = await Store.findById(storeId);\r\n    let product = await Product.findById(customrFeeParam.product);\r\n\r\n    if (!store) throw { err: \"Store not found\" };\r\n    if (!product) throw { err: \"product not found\" };\r\n\r\n    let newCustomFee = new CustomFee(customrFeeParam);\r\n    await newCustomFee.save();\r\n\r\n    if (newCustomFee.save()) {\r\n      product.customFee.availability = true;\r\n      product.customFee.items.push(newCustomFee._id);\r\n      await product.save();\r\n    }\r\n\r\n    return await CustomFee.find({ product: newCustomFee.product });\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nconst deleteCustomFee = async (customFeeId) => {\r\n  try {\r\n    console.log(customFeeId);\r\n    let customFee = await CustomFee.findByIdAndDelete(customFeeId);\r\n    console.log(customFee);\r\n    if (!customFee) throw { err: \"custom fee not found\" };\r\n    return \"fee removed from product\";\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport {\r\n  getProducts,\r\n  createProduct,\r\n  updateProduct,\r\n  deleteProduct,\r\n  getProductDetails,\r\n  reviewProduct,\r\n  createVariant,\r\n  updateVariant,\r\n  addVariantItem,\r\n  getVariantItem,\r\n  addCustomFee,\r\n  deleteCustomFee,\r\n};\r\n\r\n//UPDATES\r\n// getProducts should provide for getStoreProducts, by adding storeid to the url parameter.\r\n"],"file":"product.service.js"}