{"version":3,"sources":["../../src/services/category.service.js"],"names":["getCategories","urlParams","limit","Number","skip","pipeline","$unset","Category","aggregate","lookup","from","localField","foreignField","as","addFields","productCount","$size","storeCount","append","createCategory","categoryParams","name","image","findOne","category","err","save","msg","editCategory","editParams","id","findById","findByIdAndUpdate","$set","omitUndefined","useFindAndModify","deleteCategory","findByIdAndRemove"],"mappings":"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","sourcesContent":["import Category from '../models/category.model.js'\r\n\r\n//  Get all Categories\r\nconst getCategories = async (urlParams) => {\r\n\ttry {\r\n    const limit = Number(urlParams.limit);\r\n\t\tconst skip = Number(urlParams.skip);\r\n    const pipeline = [{ \r\n      $unset: ['products', 'stores']\r\n    }];\r\n    return Category.aggregate()\r\n    .lookup({\r\n      from: 'products',\r\n      localField: '_id',\r\n      foreignField: 'category',\r\n      as: 'products'\r\n    })\r\n    .lookup({\r\n      from: 'stores',\r\n      localField: '_id',\r\n      foreignField: 'category',\r\n      as: 'stores'\r\n    })\r\n    .addFields({\r\n      productCount: {$size: '$products'}\r\n    })\r\n    .addFields({\r\n      storeCount: {$size: '$stores'}\r\n    })\r\n    .append(pipeline);\r\n\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\n// Create a new Category\r\nconst createCategory = async (categoryParams) => {\r\n\tconst { name, image } = categoryParams;\r\n\r\n\ttry {\r\n\t\t// Check if Category exists\r\n\t\tlet category = await Category.findOne({ name });\r\n\r\n\t\tif (category) {\r\n\t\t\tthrow { err: `${category.name} already Exists` };\r\n\t\t}\r\n\r\n\t\t// Create Category Object\r\n\t\tcategory = new Category({\r\n\t\t\tname,\r\n\t\t\timage,\r\n\t\t});\r\n\r\n\t\t// Save Category to db\r\n\t\tawait category.save();\r\n\r\n\t\treturn {msg: `${category.name} category successfully created`};\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\n// Edit a category\r\nconst editCategory = async (editParams, id) => {\r\n\t// const { name, image } = editParams;\r\n\r\n\t// // Build Category Object\r\n\t// const categoryFields = {};\r\n\r\n\t// // Check for fields\r\n\t// if (image) categoryFields.name = image;\r\n\t// if (name) categoryFields.name = name;\r\n  \r\n\ttry {\r\n\t\tlet category = await Category.findById(id);\r\n\r\n\t\tif (!category) throw { err: 'Category not found' };\r\n\r\n    // Images should be replaced\r\n\r\n\t\t// Check if image field is not empty\r\n\t\t// if (image !== '' || null) {\r\n\t\t// \t// Check if image array is not empty\r\n\t\t// \tif (!category.image.length < 1) {\r\n\t\t// \t\t// Set the image string value in category object to image found from db, then append new image string\r\n\t\t// \t\tcategoryFields.image = [...category.image, image];\r\n\t\t// \t}\r\n\t\t// }\r\n\r\n\t\t// Updates the user Object with the changed values\r\n\t\tcategory = await Category.findByIdAndUpdate(\r\n\t\t\tid,\r\n\t\t\t{ $set: editParams },\r\n\t\t\t{ omitUndefined: true, new: true, useFindAndModify: false }\r\n\t\t);\r\n\r\n\t\treturn category;\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\n//   Delete a Category\r\nconst deleteCategory = async (id) => {\r\n\ttry {\r\n\t\t// Check if id matches any category from db\r\n\t\tlet category = await Category.findById(id);\r\n\r\n\t\tif (!category) throw { err: 'Category not found' };\r\n\r\n\t\t// Remove category by id\r\n\t\tawait Category.findByIdAndRemove(id);\r\n\r\n\t\treturn { msg: 'Category Deleted' };\r\n\t} catch (err) {\r\n\t\treturn err;\r\n\t}\r\n};\r\n\r\nexport {\r\n\tgetCategories,\r\n\tcreateCategory,\r\n\teditCategory,\r\n\tdeleteCategory,\r\n};\r\n"],"file":"category.service.js"}